MODULE Example;
TYPE Counter (N);
IN incr : BIT;
OUT z : [N] BIT;
VAR c : [N] BIT;
BEGIN
z[0] := REG (z[0] − incr);
c[0] := z[0] * incr;
IF blah blah blah
FOR i := 1 .. N−1 DO
z[i] := REG (z[i] − c[i−1]);
c[i] := z[i] * c[i−1]
END;
END Counter;
CONST N := 2;
IN RD' : BIT;
INOUT D : [N] TS;
VAR cnt : Counter (N);
BEGIN
cnt (N, '1);
FOR i := 0 .. N−1 DO
D[i] :=  ̃RD' | cnt.z[i]
END
END Example.
