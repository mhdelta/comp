
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARRAY BEGIN BIT BOOLEAN CASE CHAR CONST DO DIV ELSE END EXIT FALSE FOR HEXA IF ELSIF IMPORT IN INOUT INTEGER IS LONG LONGINT LOOP MOD MODULE MUX REG LATCH SR NIL OF OUT PROCEDURE REPEAT SHORT SHORTINT STRING THEN TO TRUE TS TYPE UNTIL VAR WHILE WORD AMPERSANT APOSTROF ARROW ASSIGN CIRCUNFLEX COLON COMMA DEQUAL DISTINT DOT DOTDOT EQUAL GREATER GREATEREQUAL HASHTAG LBLOCK LBRACKET LESS LESSEQUAL LPAREN MINUS NEGATION PLUS RBLOCK RBRACKET RPAREN SEMICOLON TIMES ID NUMBERLogicValue :\t"\'" "0"\n\t\t\t| "\'" "1" SimpleType : BasicType\n\t\t\t| ID "(" ExpressionList ")" BasicType :\tBIT\n\t\t\t| TS ExpressionList : Expression ExpressionList\n\t\t\t| "," Expression \n\t\t\t|  emptyType : SimpleType\n\t\t| "[" Expression "]" SimpleTypeConstDeclaration : ID ASSIGN Expression ";"\n\t\t| empty VarDeclaration : IdList ":" Type ";"\n\t\t| emptyIdList : ID IdList\n\t\t\t| "," ID \n\t\t\t| empty Selector : "." ID\n\t\t| "." INTEGER \n\t\t| "[" Expression "]"\n\t\t| emptyFactor : ID Selector\n\t\t| LogicValue\n\t\t| INTEGER\n\t\t| "~" Factor\n\t\t| "(" Expression ")"\n\t\t| MUX "(" Expression ":" Expression "," Expression ")" \n\t\t| MUX "(" Expression "," Expression ":" Expression "," Expression "," Expression "," Expression ")"\n\t\t| REG "(" ExpressionList ")"\n\t\t| LATCH "(" "(" Expression "," Expression ")" \n\t\t| SR "(" Expression "," Expression ")"  Term : Factor Term\n\t\t| "*" Factor Term\n\t\t| "/" Factor Term\n\t\t| DIV Factor Term\n\t\t| MOD Factor Term\n\t\t| emptyExpression : Term Expression\n\t\t| "+" Term\n\t\t| "-" Term\n\t\t| empty  Assignment : ID Selector ASSIGN Assignment Expression\n\t\t| Condition "|" \n\t\t| empty Condition : ExpressionRelation : Expression "=" Expression\n\t\t| Expression "#" Expression\n\t\t| Expression "<" Expression\n\t\t| Expression LESSEQUAL Expression\n\t\t| Expression ">" Expression\n\t\t| Expression GREATEREQUAL Expression IfStatement : IF Relation THEN StatementSequence IfStatement\n\t\t| ELSIF Relation THEN StatementSequence\n\t\t| ELSE StatementSequence\n\t\t| END\n\t\t| empty ForStatement : FOR ID ASSIGN Expression DOTDOT Expression DO StatementSequence END\n\t\t| ELSIF Relation THEN StatementSequence\n\t\t| ELSE StatementSequence\n\t\t| END\n\t\t| empty Statement : Assignment\n\t\t| UnitAssignment\n\t\t| IfStatement\n\t\t| ForStatement  StatementSequence : Statement StatementSequence\n\t\t| ";" Statement\n\t\t| empty  Module : MODULE\tID ";" Module END ID "."\n\t\t| TypeDeclaration ";"\n\t\t| CONST ConstDeclaration\n\t\t| IN VarDeclaration\n\t\t| INOUT VarDeclaration\n\t\t| OUT VarDeclaration\n\t\t| VAR VarDeclaration\n\t\t| BEGIN StatementSequence\n\t\t| empty FormalType : FormalType BIT\n\t\t| "[" Expression "]"\n\t\t| empty FormalBusType : FormalBusType TS\n\t\t| "[" Expression "]"\n\t\t| empty TypeDeclaration : TYPE ID "*" TypeDeclaration ";" END\n\t\t| CONST ConstDeclaration\n\t\t| IN "(" IdList ")" ":" FormalType \n\t\t| OUT VarDeclaration\n\t\t| VAR VarDeclaration\n\t\t| BEGIN StatementSequence\n\t\t| emptyUnitAssignment : ID Selector "(" ExpressionList ")"empty :'
    
_lr_action_items = {'1':([1,],[3,]),'0':([1,],[4,]),"'":([0,],[1,]),'$end':([2,3,4,],[0,-2,-1,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'LogicValue':([0,],[2,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> LogicValue","S'",1,None,None,None),
  ("LogicValue -> ' 0",'LogicValue',2,'p_LogicValue','minilola_parser.py',9),
  ("LogicValue -> ' 1",'LogicValue',2,'p_LogicValue','minilola_parser.py',10),
  ('SimpleType -> BasicType','SimpleType',1,'p_SimpleType','minilola_parser.py',14),
  ('SimpleType -> ID ( ExpressionList )','SimpleType',4,'p_SimpleType','minilola_parser.py',15),
  ('BasicType -> BIT','BasicType',1,'p_BasicType','minilola_parser.py',18),
  ('BasicType -> TS','BasicType',1,'p_BasicType','minilola_parser.py',19),
  ('ExpressionList -> Expression ExpressionList','ExpressionList',2,'p_ExpressionList','minilola_parser.py',23),
  ('ExpressionList -> , Expression','ExpressionList',2,'p_ExpressionList','minilola_parser.py',24),
  ('ExpressionList -> empty','ExpressionList',1,'p_ExpressionList','minilola_parser.py',25),
  ('Type -> SimpleType','Type',1,'p_type','minilola_parser.py',30),
  ('Type -> [ Expression ] SimpleType','Type',4,'p_type','minilola_parser.py',31),
  ('ConstDeclaration -> ID ASSIGN Expression ;','ConstDeclaration',4,'p_ConstDeclaration','minilola_parser.py',35),
  ('ConstDeclaration -> empty','ConstDeclaration',1,'p_ConstDeclaration','minilola_parser.py',36),
  ('VarDeclaration -> IdList : Type ;','VarDeclaration',4,'p_VarDeclaration','minilola_parser.py',40),
  ('VarDeclaration -> empty','VarDeclaration',1,'p_VarDeclaration','minilola_parser.py',41),
  ('IdList -> ID IdList','IdList',2,'p_IdList','minilola_parser.py',45),
  ('IdList -> , ID','IdList',2,'p_IdList','minilola_parser.py',46),
  ('IdList -> empty','IdList',1,'p_IdList','minilola_parser.py',47),
  ('Selector -> . ID','Selector',2,'p_Selector','minilola_parser.py',51),
  ('Selector -> . INTEGER','Selector',2,'p_Selector','minilola_parser.py',52),
  ('Selector -> [ Expression ]','Selector',3,'p_Selector','minilola_parser.py',53),
  ('Selector -> empty','Selector',1,'p_Selector','minilola_parser.py',54),
  ('Factor -> ID Selector','Factor',2,'p_Factor','minilola_parser.py',58),
  ('Factor -> LogicValue','Factor',1,'p_Factor','minilola_parser.py',59),
  ('Factor -> INTEGER','Factor',1,'p_Factor','minilola_parser.py',60),
  ('Factor -> ~ Factor','Factor',2,'p_Factor','minilola_parser.py',61),
  ('Factor -> ( Expression )','Factor',3,'p_Factor','minilola_parser.py',62),
  ('Factor -> MUX ( Expression : Expression , Expression )','Factor',8,'p_Factor','minilola_parser.py',63),
  ('Factor -> MUX ( Expression , Expression : Expression , Expression , Expression , Expression )','Factor',14,'p_Factor','minilola_parser.py',64),
  ('Factor -> REG ( ExpressionList )','Factor',4,'p_Factor','minilola_parser.py',65),
  ('Factor -> LATCH ( ( Expression , Expression )','Factor',7,'p_Factor','minilola_parser.py',66),
  ('Factor -> SR ( Expression , Expression )','Factor',6,'p_Factor','minilola_parser.py',67),
  ('Term -> Factor Term','Term',2,'p_Term','minilola_parser.py',71),
  ('Term -> * Factor Term','Term',3,'p_Term','minilola_parser.py',72),
  ('Term -> / Factor Term','Term',3,'p_Term','minilola_parser.py',73),
  ('Term -> DIV Factor Term','Term',3,'p_Term','minilola_parser.py',74),
  ('Term -> MOD Factor Term','Term',3,'p_Term','minilola_parser.py',75),
  ('Term -> empty','Term',1,'p_Term','minilola_parser.py',76),
  ('Expression -> Term Expression','Expression',2,'p_Expression','minilola_parser.py',81),
  ('Expression -> + Term','Expression',2,'p_Expression','minilola_parser.py',82),
  ('Expression -> - Term','Expression',2,'p_Expression','minilola_parser.py',83),
  ('Expression -> empty','Expression',1,'p_Expression','minilola_parser.py',84),
  ('Assignment -> ID Selector ASSIGN Assignment Expression','Assignment',5,'p_Assignment','minilola_parser.py',88),
  ('Assignment -> Condition |','Assignment',2,'p_Assignment','minilola_parser.py',89),
  ('Assignment -> empty','Assignment',1,'p_Assignment','minilola_parser.py',90),
  ('Condition -> Expression','Condition',1,'p_Condition','minilola_parser.py',94),
  ('Relation -> Expression = Expression','Relation',3,'p_Relation','minilola_parser.py',98),
  ('Relation -> Expression # Expression','Relation',3,'p_Relation','minilola_parser.py',99),
  ('Relation -> Expression < Expression','Relation',3,'p_Relation','minilola_parser.py',100),
  ('Relation -> Expression LESSEQUAL Expression','Relation',3,'p_Relation','minilola_parser.py',101),
  ('Relation -> Expression > Expression','Relation',3,'p_Relation','minilola_parser.py',102),
  ('Relation -> Expression GREATEREQUAL Expression','Relation',3,'p_Relation','minilola_parser.py',103),
  ('IfStatement -> IF Relation THEN StatementSequence IfStatement','IfStatement',5,'p_IfStatement','minilola_parser.py',107),
  ('IfStatement -> ELSIF Relation THEN StatementSequence','IfStatement',4,'p_IfStatement','minilola_parser.py',108),
  ('IfStatement -> ELSE StatementSequence','IfStatement',2,'p_IfStatement','minilola_parser.py',109),
  ('IfStatement -> END','IfStatement',1,'p_IfStatement','minilola_parser.py',110),
  ('IfStatement -> empty','IfStatement',1,'p_IfStatement','minilola_parser.py',111),
  ('ForStatement -> FOR ID ASSIGN Expression DOTDOT Expression DO StatementSequence END','ForStatement',9,'p_ForStatement','minilola_parser.py',115),
  ('ForStatement -> ELSIF Relation THEN StatementSequence','ForStatement',4,'p_ForStatement','minilola_parser.py',116),
  ('ForStatement -> ELSE StatementSequence','ForStatement',2,'p_ForStatement','minilola_parser.py',117),
  ('ForStatement -> END','ForStatement',1,'p_ForStatement','minilola_parser.py',118),
  ('ForStatement -> empty','ForStatement',1,'p_ForStatement','minilola_parser.py',119),
  ('Statement -> Assignment','Statement',1,'p_Statement','minilola_parser.py',123),
  ('Statement -> UnitAssignment','Statement',1,'p_Statement','minilola_parser.py',124),
  ('Statement -> IfStatement','Statement',1,'p_Statement','minilola_parser.py',125),
  ('Statement -> ForStatement','Statement',1,'p_Statement','minilola_parser.py',126),
  ('StatementSequence -> Statement StatementSequence','StatementSequence',2,'p_StatementSequence','minilola_parser.py',130),
  ('StatementSequence -> ; Statement','StatementSequence',2,'p_StatementSequence','minilola_parser.py',131),
  ('StatementSequence -> empty','StatementSequence',1,'p_StatementSequence','minilola_parser.py',132),
  ('Module -> MODULE ID ; Module END ID .','Module',7,'p_Module','minilola_parser.py',136),
  ('Module -> TypeDeclaration ;','Module',2,'p_Module','minilola_parser.py',137),
  ('Module -> CONST ConstDeclaration','Module',2,'p_Module','minilola_parser.py',138),
  ('Module -> IN VarDeclaration','Module',2,'p_Module','minilola_parser.py',139),
  ('Module -> INOUT VarDeclaration','Module',2,'p_Module','minilola_parser.py',140),
  ('Module -> OUT VarDeclaration','Module',2,'p_Module','minilola_parser.py',141),
  ('Module -> VAR VarDeclaration','Module',2,'p_Module','minilola_parser.py',142),
  ('Module -> BEGIN StatementSequence','Module',2,'p_Module','minilola_parser.py',143),
  ('Module -> empty','Module',1,'p_Module','minilola_parser.py',144),
  ('FormalType -> FormalType BIT','FormalType',2,'p_FormalType','minilola_parser.py',148),
  ('FormalType -> [ Expression ]','FormalType',3,'p_FormalType','minilola_parser.py',149),
  ('FormalType -> empty','FormalType',1,'p_FormalType','minilola_parser.py',150),
  ('FormalBusType -> FormalBusType TS','FormalBusType',2,'p_FormalBusType','minilola_parser.py',154),
  ('FormalBusType -> [ Expression ]','FormalBusType',3,'p_FormalBusType','minilola_parser.py',155),
  ('FormalBusType -> empty','FormalBusType',1,'p_FormalBusType','minilola_parser.py',156),
  ('TypeDeclaration -> TYPE ID * TypeDeclaration ; END','TypeDeclaration',6,'p_TypeDeclaration','minilola_parser.py',160),
  ('TypeDeclaration -> CONST ConstDeclaration','TypeDeclaration',2,'p_TypeDeclaration','minilola_parser.py',161),
  ('TypeDeclaration -> IN ( IdList ) : FormalType','TypeDeclaration',6,'p_TypeDeclaration','minilola_parser.py',162),
  ('TypeDeclaration -> OUT VarDeclaration','TypeDeclaration',2,'p_TypeDeclaration','minilola_parser.py',163),
  ('TypeDeclaration -> VAR VarDeclaration','TypeDeclaration',2,'p_TypeDeclaration','minilola_parser.py',164),
  ('TypeDeclaration -> BEGIN StatementSequence','TypeDeclaration',2,'p_TypeDeclaration','minilola_parser.py',165),
  ('TypeDeclaration -> empty','TypeDeclaration',1,'p_TypeDeclaration','minilola_parser.py',166),
  ('UnitAssignment -> ID Selector ( ExpressionList )','UnitAssignment',5,'p_UnitAssignment','minilola_parser.py',170),
  ('empty -> <empty>','empty',0,'p_empty','minilola_parser.py',177),
]
