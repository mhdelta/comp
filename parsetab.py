
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARRAY BEGIN BIT BOOLEAN CASE CHAR CONST DO DIV ELSE END EXIT FALSE FOR HEXA IF ELSIF IMPORT IN INOUT INTEGER IS LONG LONGINT LOGIC0 LOGIC1 LOOP MOD MODULE MUX REG LATCH SR NIL OF OUT OC PROCEDURE REPEAT SHORT SHORTINT STRING THEN TO TRUE TS TYPE UNTIL VAR WHILE WORD AMPERSANT APOSTROF ARROW ASSIGN CIRCUNFLEX COLON COMMA DEQUAL DISTINT DOT DOTDOT DIVISION EQUAL GREATER GREATEREQUAL HASHTAG LBLOCK LBRACKET LESS LESSEQUAL LPAREN MINUS NEGATION OR PLUS RBLOCK RBRACKET RPAREN SEMICOLON TIMES ID NUMBER Module : MODULE\tID SEMICOLON module1 module2 module3 module4 module5 module6 module7 END ID DOT TypeDeclaration : TYPE ID times1 typedeclaration1 SEMICOLON module2 typedecl3 typedecl4 module5 module6 module7 END IDSimpleType : BasicType\n\t\t\t| ID simpletype1 simpletype1 : empty\n\t\t| LPAREN ExpressionList RPARENBasicType :\tBIT\n\t\t\t| TS \n\t\t\t| OC ExpressionList : Expression expressionlist1expressionlist1 : empty\n\t\t| expressionlist1 COMMA Expression Type : type1 SimpleType type1 : empty\n\t\t| type1 RBRACKET Expression LBRACKETConstDeclaration : ID ASSIGN Expression SEMICOLONVarDeclaration : IdList COLON Type SEMICOLONIdList : ID idlist1idlist1 : empty\n\t\t| idlist1 COMMA ID Selector : selector1 selector1 : empty\n\t\t| selector1 DOT ID\n\t\t| selector1 DOT INTEGER\n\t\t| selector1 LBRACKET Expression RBRACKETFactor : ID Selector\n\t\t| LOGIC0\n\t\t| LOGIC1\n\t\t| INTEGER\n\t\t| NEGATION Factor\n\t\t| LPAREN Expression RPAREN\n\t\t| MUX LPAREN Expression COLON Expression COMMA Expression RPAREN \n\t\t| MUX LPAREN Expression COMMA Expression COLON Expression COMMA Expression COMMA Expression COMMA Expression RPAREN\n\t\t| REG LPAREN ExpressionList RPAREN\n\t\t| LATCH LPAREN LPAREN Expression COMMA Expression RPAREN \n\t\t| SR LPAREN Expression COMMA Expression RPAREN  Term : Factor term1 term1 : empty\n\t\t| term1 term2 Factor term2 : TIMES\n\t\t| DIVISION\n\t\t| DIV\n\t\t| MOD Expression : Term expression1 expression1 : empty\n\t\t| expression1 expression2 Term expression2 : PLUS\n\t\t| MINUS   Assignment : ID Selector ASSIGN assignment1 Expression assignment1 : empty\n\t\t| Condition OR  Condition : ExpressionRelation : Expression "=" Expression\n\t\t| Expression HASHTAG Expression\n\t\t| Expression LESS Expression\n\t\t| Expression LESSEQUAL Expression\n\t\t| Expression GREATER Expression\n\t\t| Expression GREATEREQUAL Expression IfStatement : IF Relation THEN StatementSequence ifstatement1 ifstatement2 END ifstatement1 : empty\n\t\t| ifstatement1 ELSIF Relation THEN StatementSequence  ifstatement2 : empty\n\t\t| ELSE StatementSequence ForStatement : FOR ID ASSIGN Expression DOTDOT Expression DO StatementSequence END\n\t\t| ELSIF Relation THEN StatementSequence\n\t\t| ELSE StatementSequence\n\t\t| END Statement : Assignment\n\t\t| UnitAssignment\n\t\t| IfStatement\n\t\t| ForStatement  StatementSequence : Statement statementsequence1  statementsequence1 : empty\n\t\t| statementsequence1 SEMICOLON Statement times1 : empty\n\t\t| TIMES typedeclaration1 : empty\n\t\t| LPAREN IdList RPAREN typedecl3 : empty\n\t\t| IN typedecl31 typedecl31 : empty\n\t\t| typedecl31 IdList COLON FormalType SEMICOLON typedecl4 : empty\n\t\t| IN typedecl41 typedecl41 : empty\n\t\t| typedecl41 IdList COLON FormalBusType SEMICOLON module1 : empty\n\t\t| module1 TypeDeclaration SEMICOLON module2 : CONST module21\n\t\t| empty module21 : module21 ConstDeclaration\n\t\t| empty  module3 : empty\n\t\t| IN module31 module31 : empty\n\t\t| module31 VarDeclaration module4 : empty\n\t\t| INOUT module41 module41 : empty\n\t\t| module41 VarDeclaration module5 : empty\n\t\t| OUT module51 module51 : empty\n\t\t| module51 VarDeclaration module6 : empty\n\t\t| VAR module61 module61 : empty\n\t\t| module61 VarDeclaration module7 : empty\n\t\t|  BEGIN StatementSequence FormalType : formaltype1 BIT formaltype1 : empty\n\t\t| formaltype1\n\t\t| LBRACKET formaltype2 RBRACKET formaltype2 : empty\n\t\t| Expression FormalBusType : formaltype1 tsoroc tsoroc : TS\n\t\t| OCUnitAssignment : ID Selector LPAREN ExpressionList RPARENempty :'
    
_lr_action_items = {'LOGIC0':([37,58,62,75,79,87,91,101,110,115,116,117,118,119,120,123,124,125,127,144,146,147,157,163,164,165,166,167,168,171,172,173,180,181,198,201,204,205,212,215,222,230,233,255,259,],[50,50,50,50,50,50,50,50,50,-41,50,-40,-42,-43,50,50,-47,-48,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-50,50,50,50,-51,50,50,50,50,50,]),'LOGIC1':([37,58,62,75,79,87,91,101,110,115,116,117,118,119,120,123,124,125,127,144,146,147,157,163,164,165,166,167,168,171,172,173,180,181,198,201,204,205,212,215,222,230,233,255,259,],[51,51,51,51,51,51,51,51,51,-41,51,-40,-42,-43,51,51,-47,-48,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-50,51,51,51,-51,51,51,51,51,51,]),'CONST':([4,5,6,12,63,],[-121,-87,10,-88,10,]),'ELSIF':([50,51,53,56,57,60,65,76,77,80,81,84,85,86,88,92,93,94,96,97,99,102,126,135,136,138,148,150,153,155,156,169,170,174,182,194,195,202,208,213,214,216,217,220,229,232,242,243,254,256,257,261,],[-27,-28,-121,-29,-121,-121,91,-38,-37,-44,-45,-21,-26,-22,-30,-121,-71,-68,-69,-67,91,-70,-31,-72,-73,-66,-39,-34,-46,-24,-23,91,91,91,-25,-65,-74,-121,-36,-120,-49,230,-60,-35,91,-32,91,-59,91,-64,-61,-33,]),'DO':([50,51,53,56,57,60,76,77,80,81,84,85,86,88,126,148,150,153,155,156,182,208,220,227,232,261,],[-27,-28,-121,-29,-121,-121,-38,-37,-44,-45,-21,-26,-22,-30,-31,-39,-34,-46,-24,-23,-25,-36,-35,242,-32,-33,]),'THEN':([50,51,53,56,57,60,76,77,80,81,84,85,86,88,126,134,140,148,150,153,155,156,182,188,189,190,191,192,193,208,220,232,245,261,],[-27,-28,-121,-29,-121,-121,-38,-37,-44,-45,-21,-26,-22,-30,-31,169,174,-39,-34,-46,-24,-23,-25,-58,-57,-55,-54,-56,-53,-36,-35,-32,254,-33,]),'MUX':([37,58,62,75,79,87,91,101,110,115,116,117,118,119,120,123,124,125,127,144,146,147,157,163,164,165,166,167,168,171,172,173,180,181,198,201,204,205,212,215,222,230,233,255,259,],[52,52,52,52,52,52,52,52,52,-41,52,-40,-42,-43,52,52,-47,-48,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-50,52,52,52,-51,52,52,52,52,52,]),'LBRACKET':([50,51,53,56,57,60,76,77,80,81,84,85,86,88,100,126,142,148,150,153,155,156,182,208,209,220,225,232,261,],[-27,-28,-121,-29,-121,-121,-38,-37,-44,-45,127,-26,-22,-30,-121,-31,176,-39,-34,-46,-24,-23,-25,-36,222,-35,222,-32,-33,]),'LESSEQUAL':([50,51,53,56,57,60,76,77,80,81,84,85,86,88,126,133,148,150,153,155,156,182,208,220,232,261,],[-27,-28,-121,-29,-121,-121,-38,-37,-44,-45,-21,-26,-22,-30,-31,167,-39,-34,-46,-24,-23,-25,-36,-35,-32,-33,]),'DIV':([50,51,53,56,60,76,77,84,85,86,88,126,148,150,155,156,182,208,220,232,261,],[-27,-28,-121,-29,-121,-38,118,-21,-26,-22,-30,-31,-39,-34,-24,-23,-25,-36,-35,-32,-33,]),'INTEGER':([37,58,62,75,79,87,91,101,110,115,116,117,118,119,120,123,124,125,127,128,144,146,147,157,163,164,165,166,167,168,171,172,173,180,181,198,201,204,205,212,215,222,230,233,255,259,],[56,56,56,56,56,56,56,56,56,-41,56,-40,-42,-43,56,56,-47,-48,56,155,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-50,56,56,56,-51,56,56,56,56,56,]),'REG':([37,58,62,75,79,87,91,101,110,115,116,117,118,119,120,123,124,125,127,144,146,147,157,163,164,165,166,167,168,171,172,173,180,181,198,201,204,205,212,215,222,230,233,255,259,],[55,55,55,55,55,55,55,55,55,-41,55,-40,-42,-43,55,55,-47,-48,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-50,55,55,55,-51,55,55,55,55,55,]),'INOUT':([4,5,6,8,9,10,12,13,14,15,16,17,22,23,24,34,83,112,],[-121,-87,-121,-121,-90,-121,-88,19,-93,-121,-92,-89,-94,-95,-91,-96,-16,-17,]),'BEGIN':([4,5,6,8,9,10,12,13,14,15,16,17,19,20,21,22,23,24,29,30,31,32,33,34,41,42,43,44,45,46,63,68,69,70,83,89,104,112,130,131,132,158,159,160,161,162,185,186,187,211,238,251,],[-121,-87,-121,-121,-90,-121,-88,-121,-93,-121,-92,-89,-121,-121,-97,-94,-95,-91,-99,-98,-121,-101,-121,-96,-100,65,-105,-121,-103,-102,-121,-106,-107,-104,-16,-121,-108,-17,-121,-79,-121,-80,-81,-121,-83,-121,-84,-85,-121,65,-82,-86,]),'LATCH':([37,58,62,75,79,87,91,101,110,115,116,117,118,119,120,123,124,125,127,144,146,147,157,163,164,165,166,167,168,171,172,173,180,181,198,201,204,205,212,215,222,230,233,255,259,],[54,54,54,54,54,54,54,54,54,-41,54,-40,-42,-43,54,54,-47,-48,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-50,54,54,54,-51,54,54,54,54,54,]),'RPAREN':([36,48,49,50,51,53,56,57,60,64,76,77,80,81,82,84,85,86,88,113,121,122,126,148,150,151,152,153,155,156,177,182,183,197,206,207,208,218,220,232,260,261,],[-121,-19,-18,-27,-28,-121,-29,-121,-121,90,-38,-37,-44,-45,126,-21,-26,-22,-30,-20,150,-121,-31,-39,-34,-10,-11,-46,-24,-23,203,-25,208,213,220,-12,-36,232,-35,-32,261,-33,]),'SEMICOLON':([3,7,18,26,27,28,38,39,50,51,53,56,57,59,60,72,76,77,80,81,84,85,86,88,90,92,93,94,96,97,102,105,106,107,108,109,111,126,135,136,138,143,145,148,150,153,155,156,182,194,195,203,208,213,214,220,224,232,234,240,243,248,249,250,252,256,261,],[4,12,-121,-121,-75,-76,63,-77,-27,-28,-121,-29,-121,83,-121,112,-38,-37,-44,-45,-21,-26,-22,-30,-78,-121,-71,-68,-69,-67,-70,-13,-3,-9,-8,-7,-121,-31,170,-73,-66,-4,-5,-39,-34,-46,-24,-23,-25,-65,-74,-6,-36,-120,-49,-35,238,-32,-111,251,-59,-119,-117,-118,-2,-64,-33,]),'LESS':([50,51,53,56,57,60,76,77,80,81,84,85,86,88,126,133,148,150,153,155,156,182,208,220,232,261,],[-27,-28,-121,-29,-121,-121,-38,-37,-44,-45,-21,-26,-22,-30,-31,165,-39,-34,-46,-24,-23,-25,-36,-35,-32,-33,]),'TS':([47,71,73,176,223,225,239,247,],[-121,108,-14,-15,-112,-121,250,-114,]),'MINUS':([50,51,53,56,57,60,76,77,80,81,84,85,86,88,126,148,150,153,155,156,182,208,220,232,261,],[-27,-28,-121,-29,-121,-121,-38,-37,125,-45,-21,-26,-22,-30,-31,-39,-34,-46,-24,-23,-25,-36,-35,-32,-33,]),'DOTDOT':([50,51,53,56,57,60,76,77,80,81,84,85,86,88,126,148,150,153,155,156,182,196,208,220,232,261,],[-27,-28,-121,-29,-121,-121,-38,-37,-44,-45,-21,-26,-22,-30,-31,-39,-34,-46,-24,-23,-25,212,-36,-35,-32,-33,]),'COMMA':([36,48,49,50,51,53,56,57,60,76,77,80,81,84,85,86,88,113,114,122,126,129,148,149,150,151,152,153,155,156,178,182,207,208,219,220,232,246,258,261,],[-121,-19,74,-27,-28,-121,-29,-121,-121,-38,-37,-44,-45,-21,-26,-22,-30,-20,147,-121,-31,157,-39,180,-34,181,-11,-46,-24,-23,204,-25,-12,-36,233,-35,-32,255,259,-33,]),'DOT':([60,84,86,100,141,155,156,182,],[-121,128,-22,-121,175,-24,-23,-25,]),'COLON':([35,36,48,49,50,51,53,56,57,60,76,77,80,81,84,85,86,88,113,114,126,148,150,153,155,156,179,182,184,208,210,220,232,261,],[47,-121,-19,-18,-27,-28,-121,-29,-121,-121,-38,-37,-44,-45,-21,-26,-22,-30,-20,146,-31,-39,-34,-46,-24,-23,205,-25,209,-36,225,-35,-32,-33,]),'BIT':([47,71,73,176,209,221,223,247,],[-121,109,-14,-15,-121,234,-112,-114,]),'=':([50,51,53,56,57,60,76,77,80,81,84,85,86,88,126,133,148,150,153,155,156,182,208,220,232,261,],[-27,-28,-121,-29,-121,-121,-38,-37,-44,-45,-21,-26,-22,-30,-31,168,-39,-34,-46,-24,-23,-25,-36,-35,-32,-33,]),'ASSIGN':([25,84,86,100,137,139,155,156,182,],[37,-21,-22,-121,171,173,-24,-23,-25,]),'OUT':([4,5,6,8,9,10,12,13,14,15,16,17,19,20,21,22,23,24,29,30,34,41,63,83,89,112,130,131,132,158,159,160,161,162,185,186,238,251,],[-121,-87,-121,-121,-90,-121,-88,-121,-93,-121,-92,-89,-121,33,-97,-94,-95,-91,-99,-98,-96,-100,-121,-16,-121,-17,-121,-79,-121,-80,-81,-121,-83,33,-84,-85,-82,-86,]),'PLUS':([50,51,53,56,57,60,76,77,80,81,84,85,86,88,126,148,150,153,155,156,182,208,220,232,261,],[-27,-28,-121,-29,-121,-121,-38,-37,124,-45,-21,-26,-22,-30,-31,-39,-34,-46,-24,-23,-25,-36,-35,-32,-33,]),'DIVISION':([50,51,53,56,60,76,77,84,85,86,88,126,148,150,155,156,182,208,220,232,261,],[-27,-28,-121,-29,-121,-38,115,-21,-26,-22,-30,-31,-39,-34,-24,-23,-25,-36,-35,-32,-33,]),'END':([4,5,6,8,9,10,12,13,14,15,16,17,19,20,21,22,23,24,29,30,31,32,33,34,41,42,43,44,45,46,50,51,53,56,57,60,63,65,66,67,68,69,70,76,77,80,81,83,84,85,86,88,89,92,93,94,95,96,97,99,102,104,112,126,130,131,132,135,136,138,148,150,153,155,156,158,159,160,161,162,169,170,174,182,185,186,187,194,195,202,208,211,213,214,216,217,220,226,228,229,231,232,238,242,243,244,251,253,254,256,257,261,],[-121,-87,-121,-121,-90,-121,-88,-121,-93,-121,-92,-89,-121,-121,-97,-94,-95,-91,-99,-98,-121,-101,-121,-96,-100,-121,-105,-121,-103,-102,-27,-28,-121,-29,-121,-121,-121,97,103,-109,-106,-107,-104,-38,-37,-44,-45,-16,-21,-26,-22,-30,-121,-121,-71,-68,-110,-69,-67,97,-70,-108,-17,-31,-121,-79,-121,-72,-73,-66,-39,-34,-46,-24,-23,-80,-81,-121,-83,-121,97,97,97,-25,-84,-85,-121,-65,-74,-121,-36,-121,-120,-49,-121,-60,-35,241,243,97,-62,-32,-82,97,-59,-63,-86,256,97,-64,-61,-33,]),'FOR':([65,99,169,170,174,229,242,254,],[98,98,98,98,98,98,98,98,]),'GREATEREQUAL':([50,51,53,56,57,60,76,77,80,81,84,85,86,88,126,133,148,150,153,155,156,182,208,220,232,261,],[-27,-28,-121,-29,-121,-121,-38,-37,-44,-45,-21,-26,-22,-30,-31,163,-39,-34,-46,-24,-23,-25,-36,-35,-32,-33,]),'MODULE':([0,],[2,]),'TIMES':([18,50,51,53,56,60,76,77,84,85,86,88,126,148,150,155,156,182,208,220,232,261,],[28,-27,-28,-121,-29,-121,-38,117,-21,-26,-22,-30,-31,-39,-34,-24,-23,-25,-36,-35,-32,-33,]),'LPAREN':([18,26,27,28,37,52,54,55,58,61,62,75,78,79,84,86,87,91,100,101,110,111,115,116,117,118,119,120,123,124,125,127,139,144,146,147,155,156,157,163,164,165,166,167,168,171,172,173,180,181,182,198,201,204,205,212,215,222,230,233,255,259,],[-121,40,-75,-76,58,75,78,79,58,87,58,58,120,58,-21,-22,58,58,-121,58,58,144,-41,58,-40,-42,-43,58,58,-47,-48,58,172,58,58,58,-24,-23,58,58,58,58,58,58,58,58,58,58,58,58,-25,58,-50,58,58,58,-51,58,58,58,58,58,]),'IN':([4,5,6,8,9,10,12,16,17,24,63,83,89,130,131,132,158,159,238,],[-121,-87,-121,15,-90,-121,-88,-92,-89,-91,-121,-16,130,-121,-79,160,-80,-81,-82,]),'VAR':([4,5,6,8,9,10,12,13,14,15,16,17,19,20,21,22,23,24,29,30,31,32,33,34,41,45,46,63,70,83,89,112,130,131,132,158,159,160,161,162,185,186,187,238,251,],[-121,-87,-121,-121,-90,-121,-88,-121,-93,-121,-92,-89,-121,-121,-97,-94,-95,-91,-99,-98,44,-101,-121,-96,-100,-103,-102,-121,-104,-16,-121,-17,-121,-79,-121,-80,-81,-121,-83,-121,-84,-85,44,-82,-86,]),'ELSE':([50,51,53,56,57,60,65,76,77,80,81,84,85,86,88,92,93,94,96,97,99,102,126,135,136,138,148,150,153,155,156,169,170,174,182,194,195,202,208,213,214,216,217,220,229,232,242,243,254,256,257,261,],[-27,-28,-121,-29,-121,-121,99,-38,-37,-44,-45,-21,-26,-22,-30,-121,-71,-68,-69,-67,99,-70,-31,-72,-73,-66,-39,-34,-46,-24,-23,99,99,99,-25,-65,-74,-121,-36,-120,-49,229,-60,-35,99,-32,99,-59,99,-64,-61,-33,]),'ID':([2,10,11,15,16,17,19,22,23,24,29,30,33,34,37,40,41,44,45,46,47,58,62,65,68,69,70,71,73,74,75,79,83,87,91,98,99,101,103,104,110,112,115,116,117,118,119,120,123,124,125,127,128,130,144,146,147,157,158,159,160,163,164,165,166,167,168,169,170,171,172,173,174,176,180,181,185,186,198,201,204,205,212,215,222,229,230,233,238,241,242,251,254,255,259,],[3,-121,18,-121,-92,25,-121,36,-95,-91,-99,36,-121,-96,60,36,-100,-121,-103,36,-121,60,60,100,36,-107,-104,111,-14,113,60,60,-16,60,60,137,100,60,141,-108,60,-17,-41,60,-40,-42,-43,60,60,-47,-48,60,156,-121,60,60,60,60,36,-81,-121,60,60,60,60,60,60,100,100,60,60,60,100,-15,60,60,36,-85,60,-50,60,60,60,-51,60,100,60,60,-82,252,100,-86,100,60,60,]),'IF':([65,99,169,170,174,229,242,254,],[101,101,101,101,101,101,101,101,]),'GREATER':([50,51,53,56,57,60,76,77,80,81,84,85,86,88,126,133,148,150,153,155,156,182,208,220,232,261,],[-27,-28,-121,-29,-121,-121,-38,-37,-44,-45,-21,-26,-22,-30,-31,164,-39,-34,-46,-24,-23,-25,-36,-35,-32,-33,]),'SR':([37,58,62,75,79,87,91,101,110,115,116,117,118,119,120,123,124,125,127,144,146,147,157,163,164,165,166,167,168,171,172,173,180,181,198,201,204,205,212,215,222,230,233,255,259,],[61,61,61,61,61,61,61,61,61,-41,61,-40,-42,-43,61,61,-47,-48,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-50,61,61,61,-51,61,61,61,61,61,]),'OC':([47,71,73,176,223,225,239,247,],[-121,107,-14,-15,-112,-121,248,-114,]),'NEGATION':([37,58,62,75,79,87,91,101,110,115,116,117,118,119,120,123,124,125,127,144,146,147,157,163,164,165,166,167,168,171,172,173,180,181,198,201,204,205,212,215,222,230,233,255,259,],[62,62,62,62,62,62,62,62,62,-41,62,-40,-42,-43,62,62,-47,-48,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-50,62,62,62,-51,62,62,62,62,62,]),'HASHTAG':([50,51,53,56,57,60,76,77,80,81,84,85,86,88,126,133,148,150,153,155,156,182,208,220,232,261,],[-27,-28,-121,-29,-121,-121,-38,-37,-44,-45,-21,-26,-22,-30,-31,166,-39,-34,-46,-24,-23,-25,-36,-35,-32,-33,]),'RBRACKET':([47,50,51,53,56,57,60,71,73,76,77,80,81,84,85,86,88,126,148,150,153,154,155,156,176,182,208,220,222,232,235,236,237,261,],[-121,-27,-28,-121,-29,-121,-121,110,-14,-38,-37,-44,-45,-21,-26,-22,-30,-31,-39,-34,-46,182,-24,-23,-15,-25,-36,-35,-121,-32,-115,247,-116,-33,]),'$end':([1,175,],[0,-1,]),'TYPE':([4,5,6,12,],[-121,-87,11,-88,]),'OR':([50,51,53,56,57,60,76,77,80,81,84,85,86,88,126,148,150,153,155,156,182,199,200,208,220,232,261,],[-27,-28,-121,-29,-121,-121,-38,-37,-44,-45,-21,-26,-22,-30,-31,-39,-34,-46,-24,-23,-25,215,-52,-36,-35,-32,-33,]),'MOD':([50,51,53,56,60,76,77,84,85,86,88,126,148,150,155,156,182,208,220,232,261,],[-27,-28,-121,-29,-121,-38,119,-21,-26,-22,-30,-31,-39,-34,-24,-23,-25,-36,-35,-32,-33,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'BasicType':([71,],[106,]),'term2':([77,],[116,]),'term1':([53,],[77,]),'times1':([18,],[26,]),'TypeDeclaration':([6,],[7,]),'selector1':([60,100,],[84,84,]),'statementsequence1':([92,],[135,]),'Statement':([65,99,169,170,174,229,242,254,],[92,92,92,195,92,92,92,92,]),'Factor':([37,58,62,75,79,87,91,101,110,116,120,123,127,144,146,147,157,163,164,165,166,167,168,171,172,173,180,181,198,204,205,212,222,230,233,255,259,],[53,53,88,53,53,53,53,53,53,148,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'typedecl4':([132,],[162,]),'FormalType':([209,],[224,]),'type1':([47,],[71,]),'typedecl3':([89,],[132,]),'ForStatement':([65,99,169,170,174,229,242,254,],[93,93,93,93,93,93,93,93,]),'expressionlist1':([122,],[151,]),'VarDeclaration':([22,30,46,68,],[34,41,70,104,]),'SimpleType':([71,],[105,]),'module7':([42,211,],[66,226,]),'module6':([31,187,],[42,211,]),'module5':([20,162,],[31,187,]),'module4':([13,],[20,]),'module3':([8,],[13,]),'module2':([6,63,],[8,89,]),'module1':([4,],[6,]),'Selector':([60,100,],[85,139,]),'StatementSequence':([65,99,169,174,229,242,254,],[95,138,194,202,244,253,257,]),'module61':([44,],[68,]),'UnitAssignment':([65,99,169,170,174,229,242,254,],[96,96,96,96,96,96,96,96,]),'FormalBusType':([225,],[240,]),'module41':([19,],[30,]),'empty':([4,6,8,10,13,15,18,19,20,26,31,33,36,42,44,47,53,57,60,63,89,92,100,111,122,130,132,160,162,173,187,202,209,211,216,222,225,],[5,9,14,16,21,23,27,29,32,39,43,45,48,67,69,73,76,81,86,9,131,136,86,145,152,159,161,186,32,201,43,217,223,67,231,235,223,]),'assignment1':([173,],[198,]),'Term':([37,58,75,79,87,91,101,110,120,123,127,144,146,147,157,163,164,165,166,167,168,171,172,173,180,181,198,204,205,212,222,230,233,255,259,],[57,57,57,57,57,57,57,57,57,153,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'typedecl41':([160,],[185,]),'tsoroc':([239,],[249,]),'module21':([10,],[17,]),'formaltype1':([209,225,],[221,239,]),'formaltype2':([222,],[236,]),'ifstatement2':([216,],[228,]),'ExpressionList':([79,144,172,],[121,177,197,]),'expression1':([57,],[80,]),'expression2':([80,],[123,]),'Expression':([37,58,75,79,87,91,101,110,120,127,144,146,147,157,163,164,165,166,167,168,171,172,173,180,181,198,204,205,212,222,230,233,255,259,],[59,82,114,122,129,133,133,142,149,154,122,178,179,183,188,189,190,191,192,193,196,122,200,206,207,214,218,219,227,237,133,246,258,260,]),'idlist1':([36,],[49,]),'ifstatement1':([202,],[216,]),'Type':([47,],[72,]),'IdList':([22,30,40,46,68,158,185,],[35,35,64,35,35,184,210,]),'ConstDeclaration':([17,],[24,]),'Condition':([173,],[199,]),'typedeclaration1':([26,],[38,]),'Module':([0,],[1,]),'simpletype1':([111,],[143,]),'Relation':([91,101,230,],[134,140,245,]),'typedecl31':([130,],[158,]),'Assignment':([65,99,169,170,174,229,242,254,],[94,94,94,94,94,94,94,94,]),'module31':([15,],[22,]),'module51':([33,],[46,]),'IfStatement':([65,99,169,170,174,229,242,254,],[102,102,102,102,102,102,102,102,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Module","S'",1,None,None,None),
  ('Module -> MODULE ID SEMICOLON module1 module2 module3 module4 module5 module6 module7 END ID DOT','Module',13,'p_Module','minilola_parser.py',11),
  ('TypeDeclaration -> TYPE ID times1 typedeclaration1 SEMICOLON module2 typedecl3 typedecl4 module5 module6 module7 END ID','TypeDeclaration',13,'p_TypeDeclaration','minilola_parser.py',15),
  ('SimpleType -> BasicType','SimpleType',1,'p_SimpleType','minilola_parser.py',21),
  ('SimpleType -> ID simpletype1','SimpleType',2,'p_SimpleType','minilola_parser.py',22),
  ('simpletype1 -> empty','simpletype1',1,'p_simpletype1','minilola_parser.py',26),
  ('simpletype1 -> LPAREN ExpressionList RPAREN','simpletype1',3,'p_simpletype1','minilola_parser.py',27),
  ('BasicType -> BIT','BasicType',1,'p_BasicType','minilola_parser.py',31),
  ('BasicType -> TS','BasicType',1,'p_BasicType','minilola_parser.py',32),
  ('BasicType -> OC','BasicType',1,'p_BasicType','minilola_parser.py',33),
  ('ExpressionList -> Expression expressionlist1','ExpressionList',2,'p_ExpressionList','minilola_parser.py',37),
  ('expressionlist1 -> empty','expressionlist1',1,'p_expressionlist1','minilola_parser.py',41),
  ('expressionlist1 -> expressionlist1 COMMA Expression','expressionlist1',3,'p_expressionlist1','minilola_parser.py',42),
  ('Type -> type1 SimpleType','Type',2,'p_type','minilola_parser.py',47),
  ('type1 -> empty','type1',1,'p_type1','minilola_parser.py',51),
  ('type1 -> type1 RBRACKET Expression LBRACKET','type1',4,'p_type1','minilola_parser.py',52),
  ('ConstDeclaration -> ID ASSIGN Expression SEMICOLON','ConstDeclaration',4,'p_ConstDeclaration','minilola_parser.py',56),
  ('VarDeclaration -> IdList COLON Type SEMICOLON','VarDeclaration',4,'p_VarDeclaration','minilola_parser.py',60),
  ('IdList -> ID idlist1','IdList',2,'p_IdList','minilola_parser.py',64),
  ('idlist1 -> empty','idlist1',1,'p_idlist1','minilola_parser.py',68),
  ('idlist1 -> idlist1 COMMA ID','idlist1',3,'p_idlist1','minilola_parser.py',69),
  ('Selector -> selector1','Selector',1,'p_Selector','minilola_parser.py',73),
  ('selector1 -> empty','selector1',1,'p_selector1','minilola_parser.py',77),
  ('selector1 -> selector1 DOT ID','selector1',3,'p_selector1','minilola_parser.py',78),
  ('selector1 -> selector1 DOT INTEGER','selector1',3,'p_selector1','minilola_parser.py',79),
  ('selector1 -> selector1 LBRACKET Expression RBRACKET','selector1',4,'p_selector1','minilola_parser.py',80),
  ('Factor -> ID Selector','Factor',2,'p_Factor','minilola_parser.py',84),
  ('Factor -> LOGIC0','Factor',1,'p_Factor','minilola_parser.py',85),
  ('Factor -> LOGIC1','Factor',1,'p_Factor','minilola_parser.py',86),
  ('Factor -> INTEGER','Factor',1,'p_Factor','minilola_parser.py',87),
  ('Factor -> NEGATION Factor','Factor',2,'p_Factor','minilola_parser.py',88),
  ('Factor -> LPAREN Expression RPAREN','Factor',3,'p_Factor','minilola_parser.py',89),
  ('Factor -> MUX LPAREN Expression COLON Expression COMMA Expression RPAREN','Factor',8,'p_Factor','minilola_parser.py',90),
  ('Factor -> MUX LPAREN Expression COMMA Expression COLON Expression COMMA Expression COMMA Expression COMMA Expression RPAREN','Factor',14,'p_Factor','minilola_parser.py',91),
  ('Factor -> REG LPAREN ExpressionList RPAREN','Factor',4,'p_Factor','minilola_parser.py',92),
  ('Factor -> LATCH LPAREN LPAREN Expression COMMA Expression RPAREN','Factor',7,'p_Factor','minilola_parser.py',93),
  ('Factor -> SR LPAREN Expression COMMA Expression RPAREN','Factor',6,'p_Factor','minilola_parser.py',94),
  ('Term -> Factor term1','Term',2,'p_Term','minilola_parser.py',98),
  ('term1 -> empty','term1',1,'p_term1','minilola_parser.py',102),
  ('term1 -> term1 term2 Factor','term1',3,'p_term1','minilola_parser.py',103),
  ('term2 -> TIMES','term2',1,'p_term2','minilola_parser.py',107),
  ('term2 -> DIVISION','term2',1,'p_term2','minilola_parser.py',108),
  ('term2 -> DIV','term2',1,'p_term2','minilola_parser.py',109),
  ('term2 -> MOD','term2',1,'p_term2','minilola_parser.py',110),
  ('Expression -> Term expression1','Expression',2,'p_Expression','minilola_parser.py',115),
  ('expression1 -> empty','expression1',1,'p_expression1','minilola_parser.py',119),
  ('expression1 -> expression1 expression2 Term','expression1',3,'p_expression1','minilola_parser.py',120),
  ('expression2 -> PLUS','expression2',1,'p_expression2','minilola_parser.py',124),
  ('expression2 -> MINUS','expression2',1,'p_expression2','minilola_parser.py',125),
  ('Assignment -> ID Selector ASSIGN assignment1 Expression','Assignment',5,'p_Assignment','minilola_parser.py',129),
  ('assignment1 -> empty','assignment1',1,'p_assignment1','minilola_parser.py',133),
  ('assignment1 -> Condition OR','assignment1',2,'p_assignment1','minilola_parser.py',134),
  ('Condition -> Expression','Condition',1,'p_Condition','minilola_parser.py',137),
  ('Relation -> Expression = Expression','Relation',3,'p_Relation','minilola_parser.py',141),
  ('Relation -> Expression HASHTAG Expression','Relation',3,'p_Relation','minilola_parser.py',142),
  ('Relation -> Expression LESS Expression','Relation',3,'p_Relation','minilola_parser.py',143),
  ('Relation -> Expression LESSEQUAL Expression','Relation',3,'p_Relation','minilola_parser.py',144),
  ('Relation -> Expression GREATER Expression','Relation',3,'p_Relation','minilola_parser.py',145),
  ('Relation -> Expression GREATEREQUAL Expression','Relation',3,'p_Relation','minilola_parser.py',146),
  ('IfStatement -> IF Relation THEN StatementSequence ifstatement1 ifstatement2 END','IfStatement',7,'p_IfStatement','minilola_parser.py',150),
  ('ifstatement1 -> empty','ifstatement1',1,'p_ifstatement1','minilola_parser.py',154),
  ('ifstatement1 -> ifstatement1 ELSIF Relation THEN StatementSequence','ifstatement1',5,'p_ifstatement1','minilola_parser.py',155),
  ('ifstatement2 -> empty','ifstatement2',1,'p_ifstatement2','minilola_parser.py',159),
  ('ifstatement2 -> ELSE StatementSequence','ifstatement2',2,'p_ifstatement2','minilola_parser.py',160),
  ('ForStatement -> FOR ID ASSIGN Expression DOTDOT Expression DO StatementSequence END','ForStatement',9,'p_ForStatement','minilola_parser.py',163),
  ('ForStatement -> ELSIF Relation THEN StatementSequence','ForStatement',4,'p_ForStatement','minilola_parser.py',164),
  ('ForStatement -> ELSE StatementSequence','ForStatement',2,'p_ForStatement','minilola_parser.py',165),
  ('ForStatement -> END','ForStatement',1,'p_ForStatement','minilola_parser.py',166),
  ('Statement -> Assignment','Statement',1,'p_Statement','minilola_parser.py',170),
  ('Statement -> UnitAssignment','Statement',1,'p_Statement','minilola_parser.py',171),
  ('Statement -> IfStatement','Statement',1,'p_Statement','minilola_parser.py',172),
  ('Statement -> ForStatement','Statement',1,'p_Statement','minilola_parser.py',173),
  ('StatementSequence -> Statement statementsequence1','StatementSequence',2,'p_StatementSequence','minilola_parser.py',179),
  ('statementsequence1 -> empty','statementsequence1',1,'p_statementsequence1','minilola_parser.py',183),
  ('statementsequence1 -> statementsequence1 SEMICOLON Statement','statementsequence1',3,'p_statementsequence1','minilola_parser.py',184),
  ('times1 -> empty','times1',1,'p_times1','minilola_parser.py',190),
  ('times1 -> TIMES','times1',1,'p_times1','minilola_parser.py',191),
  ('typedeclaration1 -> empty','typedeclaration1',1,'p_typedeclaration1','minilola_parser.py',195),
  ('typedeclaration1 -> LPAREN IdList RPAREN','typedeclaration1',3,'p_typedeclaration1','minilola_parser.py',196),
  ('typedecl3 -> empty','typedecl3',1,'p_typedecl3','minilola_parser.py',200),
  ('typedecl3 -> IN typedecl31','typedecl3',2,'p_typedecl3','minilola_parser.py',201),
  ('typedecl31 -> empty','typedecl31',1,'p_typedecl31','minilola_parser.py',205),
  ('typedecl31 -> typedecl31 IdList COLON FormalType SEMICOLON','typedecl31',5,'p_typedecl31','minilola_parser.py',206),
  ('typedecl4 -> empty','typedecl4',1,'p_typedecl4','minilola_parser.py',210),
  ('typedecl4 -> IN typedecl41','typedecl4',2,'p_typedecl4','minilola_parser.py',211),
  ('typedecl41 -> empty','typedecl41',1,'p_typedecl41','minilola_parser.py',215),
  ('typedecl41 -> typedecl41 IdList COLON FormalBusType SEMICOLON','typedecl41',5,'p_typedecl41','minilola_parser.py',216),
  ('module1 -> empty','module1',1,'p_module1','minilola_parser.py',220),
  ('module1 -> module1 TypeDeclaration SEMICOLON','module1',3,'p_module1','minilola_parser.py',221),
  ('module2 -> CONST module21','module2',2,'p_module2','minilola_parser.py',226),
  ('module2 -> empty','module2',1,'p_module2','minilola_parser.py',227),
  ('module21 -> module21 ConstDeclaration','module21',2,'p_module21','minilola_parser.py',232),
  ('module21 -> empty','module21',1,'p_module21','minilola_parser.py',233),
  ('module3 -> empty','module3',1,'p_module3','minilola_parser.py',238),
  ('module3 -> IN module31','module3',2,'p_module3','minilola_parser.py',239),
  ('module31 -> empty','module31',1,'p_module31','minilola_parser.py',243),
  ('module31 -> module31 VarDeclaration','module31',2,'p_module31','minilola_parser.py',244),
  ('module4 -> empty','module4',1,'p_module4','minilola_parser.py',248),
  ('module4 -> INOUT module41','module4',2,'p_module4','minilola_parser.py',249),
  ('module41 -> empty','module41',1,'p_module41','minilola_parser.py',253),
  ('module41 -> module41 VarDeclaration','module41',2,'p_module41','minilola_parser.py',254),
  ('module5 -> empty','module5',1,'p_module5','minilola_parser.py',258),
  ('module5 -> OUT module51','module5',2,'p_module5','minilola_parser.py',259),
  ('module51 -> empty','module51',1,'p_module51','minilola_parser.py',263),
  ('module51 -> module51 VarDeclaration','module51',2,'p_module51','minilola_parser.py',264),
  ('module6 -> empty','module6',1,'p_module6','minilola_parser.py',268),
  ('module6 -> VAR module61','module6',2,'p_module6','minilola_parser.py',269),
  ('module61 -> empty','module61',1,'p_module61','minilola_parser.py',273),
  ('module61 -> module61 VarDeclaration','module61',2,'p_module61','minilola_parser.py',274),
  ('module7 -> empty','module7',1,'p_module7','minilola_parser.py',278),
  ('module7 -> BEGIN StatementSequence','module7',2,'p_module7','minilola_parser.py',279),
  ('FormalType -> formaltype1 BIT','FormalType',2,'p_FormalType','minilola_parser.py',283),
  ('formaltype1 -> empty','formaltype1',1,'p_formaltype1','minilola_parser.py',287),
  ('formaltype1 -> formaltype1','formaltype1',1,'p_formaltype1','minilola_parser.py',288),
  ('formaltype1 -> LBRACKET formaltype2 RBRACKET','formaltype1',3,'p_formaltype1','minilola_parser.py',289),
  ('formaltype2 -> empty','formaltype2',1,'p_formaltype2','minilola_parser.py',293),
  ('formaltype2 -> Expression','formaltype2',1,'p_formaltype2','minilola_parser.py',294),
  ('FormalBusType -> formaltype1 tsoroc','FormalBusType',2,'p_FormalBusType','minilola_parser.py',298),
  ('tsoroc -> TS','tsoroc',1,'p_tsoroc','minilola_parser.py',302),
  ('tsoroc -> OC','tsoroc',1,'p_tsoroc','minilola_parser.py',303),
  ('UnitAssignment -> ID Selector LPAREN ExpressionList RPAREN','UnitAssignment',5,'p_UnitAssignment','minilola_parser.py',309),
  ('empty -> <empty>','empty',0,'p_empty','minilola_parser.py',316),
]
