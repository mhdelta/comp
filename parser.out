Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    LESS
    LBRACKET
    TRUE
    MINUS
    RPAREN
    LONG
    PLUS
    IMPORT
    ARROW
    PROCEDURE
    NIL
    OF
    NEGATION
    LOOP
    APOSTROF
    SHORT
    COLON
    REPEAT
    AMPERSANT
    HASHTAG
    UNTIL
    RBLOCK
    CIRCUNFLEX
    CHAR
    WHILE
    DOT
    CASE
    WORD
    SEMICOLON
    ARRAY
    NUMBER
    FALSE
    GREATER
    BOOLEAN
    EXIT
    EQUAL
    LONGINT
    TO
    COMMA
    SHORTINT
    STRING
    IS
    TIMES
    LPAREN
    LBLOCK
    HEXA
    DEQUAL
    DISTINT
    RBRACKET

Grammar

Rule 0     S' -> LogicValue
Rule 1     LogicValue -> ' 0
Rule 2     LogicValue -> ' 1
Rule 3     SimpleType -> BasicType
Rule 4     SimpleType -> ID ( ExpressionList )
Rule 5     BasicType -> BIT
Rule 6     BasicType -> TS
Rule 7     ExpressionList -> Expression ExpressionList
Rule 8     ExpressionList -> , Expression
Rule 9     ExpressionList -> empty
Rule 10    Type -> SimpleType
Rule 11    Type -> [ Expression ] SimpleType
Rule 12    ConstDeclaration -> ID ASSIGN Expression ;
Rule 13    ConstDeclaration -> empty
Rule 14    VarDeclaration -> IdList : Type ;
Rule 15    VarDeclaration -> empty
Rule 16    IdList -> ID IdList
Rule 17    IdList -> , ID
Rule 18    IdList -> empty
Rule 19    Selector -> . ID
Rule 20    Selector -> . INTEGER
Rule 21    Selector -> [ Expression ]
Rule 22    Selector -> empty
Rule 23    Factor -> ID Selector
Rule 24    Factor -> LogicValue
Rule 25    Factor -> INTEGER
Rule 26    Factor -> ~ Factor
Rule 27    Factor -> ( Expression )
Rule 28    Factor -> MUX ( Expression : Expression , Expression )
Rule 29    Factor -> MUX ( Expression , Expression : Expression , Expression , Expression , Expression )
Rule 30    Factor -> REG ( ExpressionList )
Rule 31    Factor -> LATCH ( ( Expression , Expression )
Rule 32    Factor -> SR ( Expression , Expression )
Rule 33    Term -> Factor Term
Rule 34    Term -> * Factor Term
Rule 35    Term -> / Factor Term
Rule 36    Term -> DIV Factor Term
Rule 37    Term -> MOD Factor Term
Rule 38    Term -> empty
Rule 39    Expression -> Term Expression
Rule 40    Expression -> + Term
Rule 41    Expression -> - Term
Rule 42    Expression -> empty
Rule 43    Assignment -> ID Selector ASSIGN Assignment Expression
Rule 44    Assignment -> Condition |
Rule 45    Assignment -> empty
Rule 46    Condition -> Expression
Rule 47    Relation -> Expression = Expression
Rule 48    Relation -> Expression # Expression
Rule 49    Relation -> Expression < Expression
Rule 50    Relation -> Expression LESSEQUAL Expression
Rule 51    Relation -> Expression > Expression
Rule 52    Relation -> Expression GREATEREQUAL Expression
Rule 53    IfStatement -> IF Relation THEN StatementSequence IfStatement
Rule 54    IfStatement -> ELSIF Relation THEN StatementSequence
Rule 55    IfStatement -> ELSE StatementSequence
Rule 56    IfStatement -> END
Rule 57    IfStatement -> empty
Rule 58    ForStatement -> FOR ID ASSIGN Expression DOTDOT Expression DO StatementSequence END
Rule 59    ForStatement -> ELSIF Relation THEN StatementSequence
Rule 60    ForStatement -> ELSE StatementSequence
Rule 61    ForStatement -> END
Rule 62    ForStatement -> empty
Rule 63    Statement -> Assignment
Rule 64    Statement -> UnitAssignment
Rule 65    Statement -> IfStatement
Rule 66    Statement -> ForStatement
Rule 67    StatementSequence -> Statement StatementSequence
Rule 68    StatementSequence -> ; Statement
Rule 69    StatementSequence -> empty
Rule 70    Module -> MODULE ID ; Module END ID .
Rule 71    Module -> TypeDeclaration ;
Rule 72    Module -> CONST ConstDeclaration
Rule 73    Module -> IN VarDeclaration
Rule 74    Module -> INOUT VarDeclaration
Rule 75    Module -> OUT VarDeclaration
Rule 76    Module -> VAR VarDeclaration
Rule 77    Module -> BEGIN StatementSequence
Rule 78    Module -> empty
Rule 79    FormalType -> FormalType BIT
Rule 80    FormalType -> [ Expression ]
Rule 81    FormalType -> empty
Rule 82    FormalBusType -> FormalBusType TS
Rule 83    FormalBusType -> [ Expression ]
Rule 84    FormalBusType -> empty
Rule 85    TypeDeclaration -> TYPE ID * TypeDeclaration ; END
Rule 86    TypeDeclaration -> CONST ConstDeclaration
Rule 87    TypeDeclaration -> IN ( IdList ) : FormalType
Rule 88    TypeDeclaration -> OUT VarDeclaration
Rule 89    TypeDeclaration -> VAR VarDeclaration
Rule 90    TypeDeclaration -> BEGIN StatementSequence
Rule 91    TypeDeclaration -> empty
Rule 92    UnitAssignment -> ID Selector ( ExpressionList )
Rule 93    empty -> <empty>

Terminals, with rules where they appear

#                    : 48
'                    : 1 2
(                    : 4 27 28 29 30 31 31 32 87 92
)                    : 4 27 28 29 30 31 32 87 92
*                    : 34 85
+                    : 40
,                    : 8 17 28 29 29 29 29 31 32
-                    : 41
.                    : 19 20 70
/                    : 35
0                    : 1
1                    : 2
:                    : 14 28 29 87
;                    : 12 14 68 70 71 85
<                    : 49
=                    : 47
>                    : 51
AMPERSANT            : 
APOSTROF             : 
ARRAY                : 
ARROW                : 
ASSIGN               : 12 43 58
BEGIN                : 77 90
BIT                  : 5 79
BOOLEAN              : 
CASE                 : 
CHAR                 : 
CIRCUNFLEX           : 
COLON                : 
COMMA                : 
CONST                : 72 86
DEQUAL               : 
DISTINT              : 
DIV                  : 36
DO                   : 58
DOT                  : 
DOTDOT               : 58
ELSE                 : 55 60
ELSIF                : 54 59
END                  : 56 58 61 70 85
EQUAL                : 
EXIT                 : 
FALSE                : 
FOR                  : 58
GREATER              : 
GREATEREQUAL         : 52
HASHTAG              : 
HEXA                 : 
ID                   : 4 12 16 17 19 23 43 58 70 70 85 92
IF                   : 53
IMPORT               : 
IN                   : 73 87
INOUT                : 74
INTEGER              : 20 25
IS                   : 
LATCH                : 31
LBLOCK               : 
LBRACKET             : 
LESS                 : 
LESSEQUAL            : 50
LONG                 : 
LONGINT              : 
LOOP                 : 
LPAREN               : 
MINUS                : 
MOD                  : 37
MODULE               : 70
MUX                  : 28 29
NEGATION             : 
NIL                  : 
NUMBER               : 
OF                   : 
OUT                  : 75 88
PLUS                 : 
PROCEDURE            : 
RBLOCK               : 
RBRACKET             : 
REG                  : 30
REPEAT               : 
RPAREN               : 
SEMICOLON            : 
SHORT                : 
SHORTINT             : 
SR                   : 32
STRING               : 
THEN                 : 53 54 59
TIMES                : 
TO                   : 
TRUE                 : 
TS                   : 6 82
TYPE                 : 85
UNTIL                : 
VAR                  : 76 89
WHILE                : 
WORD                 : 
[                    : 11 21 80 83
]                    : 11 21 80 83
error                : 
|                    : 44
~                    : 26

Nonterminals, with rules where they appear

Assignment           : 43 63
BasicType            : 3
Condition            : 44
ConstDeclaration     : 72 86
Expression           : 7 8 11 12 21 27 28 28 28 29 29 29 29 29 29 31 31 32 32 39 43 46 47 47 48 48 49 49 50 50 51 51 52 52 58 58 80 83
ExpressionList       : 4 7 30 92
Factor               : 26 33 34 35 36 37
ForStatement         : 66
FormalBusType        : 82
FormalType           : 79 87
IdList               : 14 16 87
IfStatement          : 53 65
LogicValue           : 24 0
Module               : 70
Relation             : 53 54 59
Selector             : 23 43 92
SimpleType           : 10 11
Statement            : 67 68
StatementSequence    : 53 54 55 58 59 60 67 77 90
Term                 : 33 34 35 36 37 39 40 41
Type                 : 14
TypeDeclaration      : 71 85
UnitAssignment       : 64
VarDeclaration       : 73 74 75 76 88 89
empty                : 9 13 15 18 22 38 42 45 57 62 69 78 81 84 91

Parsing method: LALR

state 0

    (0) S' -> . LogicValue
    (1) LogicValue -> . ' 0
    (2) LogicValue -> . ' 1

    '               shift and go to state 1

    LogicValue                     shift and go to state 2

state 1

    (1) LogicValue -> ' . 0
    (2) LogicValue -> ' . 1

    0               shift and go to state 4
    1               shift and go to state 3


state 2

    (0) S' -> LogicValue .



state 3

    (2) LogicValue -> ' 1 .

    $end            reduce using rule 2 (LogicValue -> ' 1 .)


state 4

    (1) LogicValue -> ' 0 .

    $end            reduce using rule 1 (LogicValue -> ' 0 .)

